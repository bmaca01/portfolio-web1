name: Debug Cloudflared SSH

on:
  workflow_dispatch:

jobs:
  debug:
    runs-on: ubuntu-latest

    steps:
    - name: Check secrets
      run: |
        echo "=== Verifying secrets are set ==="
        echo "SSH_HOST is set: ${{ secrets.SSH_HOST != '' }}"
        echo "SSH_USER is set: ${{ secrets.SSH_USER != '' }}"
        echo "SSH_PRIVATE_KEY is set: ${{ secrets.SSH_PRIVATE_KEY != '' }}"

        # Show the SSH host (this should be your Cloudflare domain)
        echo ""
        echo "SSH_HOST value: ${{ secrets.SSH_HOST }}"
        echo "This should be your domain like: t1.benjmacaro.dev or ssh.benjmacaro.dev"

    - name: Install and test cloudflared
      run: |
        echo "=== Installing cloudflared ==="
        wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
        sudo dpkg -i cloudflared-linux-amd64.deb

        echo ""
        echo "Cloudflared version:"
        cloudflared --version

    - name: Test SSH key format
      run: |
        echo "=== Testing SSH key format ==="
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/test_key
        chmod 600 ~/.ssh/test_key

        # Validate key
        if ssh-keygen -y -f ~/.ssh/test_key > /dev/null 2>&1; then
          echo "✓ SSH key format is valid"
          ssh-keygen -l -f ~/.ssh/test_key
        else
          echo "✗ SSH key format is invalid"
          echo "Key file size: $(wc -c < ~/.ssh/test_key) bytes"
        fi

    - name: Test cloudflared access
      run: |
        echo "=== Testing cloudflared access ==="
        echo "Attempting to check SSH service through Cloudflare..."

        # Test if we can reach the SSH service through cloudflared
        # This will fail if authentication is required, but will show if the tunnel is reachable
        timeout 10 cloudflared access ssh --hostname ${{ secrets.SSH_HOST }} 2>&1 || {
          exit_code=$?
          echo "Cloudflared exited with code: $exit_code"
          if [ $exit_code -eq 124 ]; then
            echo "Connection timed out - tunnel might not be configured for SSH"
          elif [ $exit_code -eq 1 ]; then
            echo "Connection failed - check if SSH is exposed through the tunnel"
          else
            echo "This might be normal if authentication is required"
          fi
        }

    - name: Setup and test SSH connection
      run: |
        echo "=== Setting up SSH with cloudflared ProxyCommand ==="
        mkdir -p ~/.ssh

        # Write SSH key
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key

        # Configure SSH with cloudflared ProxyCommand
        cat > ~/.ssh/config <<EOF
        Host ${{ secrets.SSH_HOST }}
          ProxyCommand cloudflared access ssh --hostname %h
          StrictHostKeyChecking no
          IdentityFile ~/.ssh/deploy_key
          User ${{ secrets.SSH_USER }}
          ConnectTimeout 30
          ServerAliveInterval 60
        EOF

        chmod 600 ~/.ssh/config

        echo ""
        echo "SSH config created. Testing connection..."

        # Test with verbose output
        ssh -vv ${{ secrets.SSH_HOST }} "echo 'SUCCESS: Connected via Cloudflared' && hostname" || {
          echo ""
          echo "=== Connection failed ==="
          echo "Possible issues:"
          echo "1. SSH service not exposed through Cloudflare Tunnel"
          echo "2. Need to configure SSH application in Cloudflare Zero Trust"
          echo "3. Authentication required (Access policies)"
          echo ""
          echo "To fix:"
          echo "1. In Cloudflare dashboard, go to Zero Trust → Access → Tunnels"
          echo "2. Edit your tunnel and add a public hostname:"
          echo "   - Subdomain: $(echo ${{ secrets.SSH_HOST }} | cut -d'.' -f1)"
          echo "   - Type: SSH"
          echo "   - URL: localhost:22"
        }

    - name: Alternative test with service token (if needed)
      run: |
        echo "=== Information about Service Token Authentication ==="
        echo "If your SSH endpoint requires authentication, you'll need to:"
        echo "1. Create a Service Token in Cloudflare Zero Trust"
        echo "2. Add CF_ACCESS_CLIENT_ID and CF_ACCESS_CLIENT_SECRET as GitHub secrets"
        echo "3. Use them in the ProxyCommand like this:"
        echo ""
        echo "ProxyCommand cloudflared access ssh --hostname %h --id <CLIENT_ID> --secret <CLIENT_SECRET>"
        echo ""
        echo "This workflow currently uses no authentication (public SSH access)"