name: Deploy with HTTP2 Protocol

on:
  push:
    branches: [ main ]
    paths:
      - 'website/**'
      - '.github/workflows/deploy-http2.yml'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install cloudflared
      run: |
        # Try using a specific version that's known to work
        wget https://github.com/cloudflare/cloudflared/releases/download/2024.9.1/cloudflared-linux-amd64
        chmod +x cloudflared-linux-amd64
        sudo mv cloudflared-linux-amd64 /usr/local/bin/cloudflared
        cloudflared version

    - name: Setup SSH with different protocols
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key

        # Try with HTTP2 protocol explicitly
        cat > ~/.ssh/config <<EOF
        Host ${{ secrets.SSH_HOST }}
          ProxyCommand /usr/local/bin/cloudflared access ssh --hostname %h --protocol http2
          StrictHostKeyChecking no
          IdentityFile ~/.ssh/deploy_key
          User ${{ secrets.SSH_USER }}
          ConnectTimeout 30
          ServerAliveInterval 60
        EOF

        chmod 600 ~/.ssh/config

        echo "Testing connection with HTTP2 protocol..."

    - name: Test SSH Connection
      run: |
        ssh -v ${{ secrets.SSH_HOST }} "echo 'Connected successfully' && hostname" || {
          echo "HTTP2 failed, trying QUIC protocol..."

          # Try QUIC protocol
          cat > ~/.ssh/config <<EOF
        Host ${{ secrets.SSH_HOST }}
          ProxyCommand /usr/local/bin/cloudflared access ssh --hostname %h --protocol quic
          StrictHostKeyChecking no
          IdentityFile ~/.ssh/deploy_key
          User ${{ secrets.SSH_USER }}
        EOF

          ssh -v ${{ secrets.SSH_HOST }} "echo 'Connected with QUIC' && hostname" || {
            echo "QUIC also failed"
            exit 1
          }
        }

    - name: Deploy with rsync
      run: |
        rsync -avz --delete -e "ssh" ./website/ ${{ secrets.SSH_HOST }}:/var/www/web1-site1/

    - name: Set permissions
      run: |
        ssh ${{ secrets.SSH_HOST }} "sudo chmod -R 755 /var/www/web1-site1 && sudo chown -R www-data:www-data /var/www/web1-site1"